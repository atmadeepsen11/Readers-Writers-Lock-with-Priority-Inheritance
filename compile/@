#include <conf.h>
#include <kernel.h>
#include <proc.h>
#include <q.h>
#include <stdio.h>
#include <lock.h>


extern unsigned long ctr1000;
extern int permission;


int lock (int ldesc, int type, int priority) {

	STATWORD ps;
	struct lentry *lptr;
    	struct pentry *pptr;
    	pptr = &proctab[currpid];
    	lptr = &locktab[ldesc];
 	int highest_prio=0;
	int index=0;
	disable(ps);
	int flag = 0;		
	kprintf("-----------asking for lock prcess %s =----------------- \n", proctab[currpid].pname);
	if (isbadlock(ldesc) || (lptr= &locktab[ldesc])->lstate==LFREE) {
		restore(ps);
		return(SYSERR);
	}
	if ( proctab[currpid].locktype[ldesc] < 0){
		restore(ps);
		return SYSERR;
	}
	if ( lptr->lstate == DELETED ){
		restore(ps);
		return DELETED;
	} 	

	kprintf("type of holding lock for newly created process %d, %s\n", lptr->ltype, pptr->pname);

	
	if(lptr->ltype == NOT_TAKEN_LOCK){	
		kprintf("type of holding lock %d\n", lptr->ltype);
		if(type==READ){
			lptr->ltype = TAKEN_LOCK_R;
			pptr->locktype[ldesc] = ASSIGNED_R;
			kprintf(" lock assigned to first process  %s, %d", pptr->pname, pptr->locktype[ldesc]);
			lptr->nreaders++;
		}
		else if(type==WRITE){
			lptr->nwriters++;
			kprintf("state of the lock%s", pptr->pname);
			locktab[ldesc].ltype = TAKEN_LOCK_W;
			pptr->locktype[ldesc] = ASSIGNED_W;			
		}
		locktab[ldesc].lstate=LUSED;
		restore(ps);
		return OK;
	}
	else {
		if(lptr->ltype == TAKEN_LOCK_W)			//			writehas lock and no onre else can get lock
			flag = 1;
		else if(lptr->ltype==TAKEN_LOCK_R){
			if(type==WRITE)				//    readers allready exists and write is asking for lock
				flag = 1; 
			else{
			
				//  readers allready exist and new reader is asking for lock
				if(!isempty(lptr->lqhead) ){
					int curr_process = q[lptr->lqtail].qprev;
					while(priority < q[curr_process].qkey && curr_process != lptr->lqhead){
						if(proctab[curr_process].locktype[ldesc]== WAIT_W){
							flag = 1;
							break;
						}
					}	
				}
			}
		}
	}

	if(flag == 0){
		lptr->prochold[currpid]=1;
		pptr->locktype[ldesc]=1;
		pptr->lock_id=-1;
		kprintf("process %s got assigned the lock  \n", proctab[currpid].pname);
		kprintf("----------------------------------------------------------");		
		enable(ps);
		return OK;
	}

//	dequeue(currpid);
	else{
        insert(currpid,lptr->lqhead,priority);
	pptr->lock_id = ldesc;
	pptr->wait_time = ctr1000;
	pptr->plwaitret = OK;
	pptr->pstate = PRWWAIT;
	kprintf("process %s got blocked \n",proctab[currpid]);
	kprintf("-------------------------------------------------");

	int temp =q[lptr->lqhead].qnext;
	kprintf("head %d   tail %d\n", q[lptr->lqhead].qnext, q[q[lptr->lqtail].qprev].qprev);
	kprintf("Printing list of lock \n");
	while(temp != lptr->lqtail){
		temp = q[temp].qnext;
		kprintf(" value is : %d \n", temp);
	}
	kprintf("---------------------------------------------------");	
	resched();
	enable(ps);
	return OK;
}

}

int checkforprio(int ldesc) {
        struct lentry *lptr;
        struct pentry *pptr;
        int maxprio=0;
        int permission=0;
        lptr = &locktab[ldesc];
        int index = q[lptr->lqtail].qprev;
        while (index != lptr->lqhead) {
                pptr = &proctab[index];
                if (proctab[index].locktype[ldesc] == WAIT_W) {
                        return index;
                }
                index = q[index].qprev;
        }
        return -1;
}
