#ifndef _LOCK_H_
#define _LOCK_H_

#ifndef NLOCKS
#define NLOCKS	50
#endif

#define READ   1
#define WRITE    2

#define	LFREE	'\01' 
#define	LUSED	'\02'
#define DELETED	 '\00'

#define WAIT_W		1
#define WAIT_R		2
#define ASSIGNED_W	3
#define ASSIGNED_R	4


#define TAKEN_LOCK	1
#define TAKEN_LOCK_W	0
#define TAKEN_LOCK_R	2	

#define isbadlock(l) (l<0 || l>=NLOCKS)

struct lentry {
	char	lstate;
	int	locknum;
	int	lqhead;
	int 	lqtail;
	int	nreaders;
	int 	nwriters;
	int     prochold[NPROC];
	int	ltype;
	int	lid;
	
};

extern struct lentry locktab[];
extern int nextlock;
//extern int nextldesc;


//void linit();
//int lcreate();
//int ldelete(int lockdescriptor);
//int lock(int ldes1, int type, int priority);
//int releaseall(int numlocks, int args,...);
//extern int getlid (int ldesc);
//extern void priorityInheritance(int pid);
//extern void priorityRampUp(int ldesc, int currpprio);
//extern int checkOtherHighPrioInQueue(int ldesc, int priority);
//int release(int pid, int ldes, int flag);
#endif
